version = '1.0'

apply plugin: 'jetty'
apply plugin: 'eclipse-wtp'
//apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'eclipse'

sourceCompatibility = 1.6

//[project] Templates plugin
//See also 'http://www.tellurianring.com/projects/gradle-plugins/gradle-templates/apply.groovy'
apply from: 'https://raw.github.com/townsfolk/gradle-templates/master/installation/apply.groovy'

ext {
    someVersionVarExample = '0.0.1'
}

sourceSets {
	selenium
}

repositories {
	mavenCentral()
}

dependencies {

	/* JDBC Driver */
	compile 'com.h2database:h2:1.3.171'

	/* Hibernate */
	compile 'org.hibernate:hibernate-core:4.1.9.Final'
	compile 'org.hibernate:hibernate-validator:4.2.0.Final'

	/* Spring */
	compile('org.springframework:spring-context:3.2.0.RELEASE') {
		exclude group: 'commons-logging', module: 'commons-logging'
	}
	compile 'org.springframework:spring-orm:3.2.0.RELEASE'
	compile 'org.springframework:spring-webmvc:3.2.0.RELEASE'
	compile 'org.springframework.security:spring-security-core:3.1.4.RELEASE'
	compile 'org.springframework.security:spring-security-web:3.1.4.RELEASE'
	compile 'org.springframework.security:spring-security-config:3.1.4.RELEASE'
	
  	/* Logging */
	compile 'log4j:log4j:1.2.17'
	compile 'org.slf4j:slf4j-log4j12:1.6.1'

	/* Servlet */
	providedCompile 'javax.servlet:servlet-api:2.5'
	providedCompile 'javax.servlet.jsp:jsp-api:2.2'
	compile 'javax.servlet:jstl:1.2'
	
	runtime 'net.jawr:jawr:3.3.3'
	
	/* Test */
	testCompile 'junit:junit:4.11'
	testCompile 'org.springframework:spring-test:3.2.0.RELEASE'
	
	/* Selenium */
	seleniumCompile 'com.h2database:h2:1.3.171'
	seleniumCompile 'junit:junit:4.11'
	seleniumCompile 'org.seleniumhq.selenium:selenium-java:2.32.0'
	
}

eclipse {
	classpath {
		plusConfigurations += configurations.seleniumCompile
	}
}

task jettyDaemon(type: org.gradle.api.plugins.jetty.JettyRun) {
	daemon = true
}

task selenium(type: Test, dependsOn: jettyDaemon) {
	testClassesDir = sourceSets.selenium.output.classesDir
	classpath = sourceSets.selenium.runtimeClasspath
}

//Generate self-distributing Gradle wrapper - BTW, simple task definition
task('wrapper', type: Wrapper).configure {
    gradleVersion = '1.7'
}

//From the Eclipse plugin - manipulates the project file and classpath etc.
eclipse {
	project {
		comment = ""

		buildCommand "org.eclipse.jdt.core.javabuilder"

		natures "com.springsource.sts.grails.core.nature",
			"org.eclipse.jdt.groovy.core.groovyNature",
			"org.eclipse.jdt.core.javanature",
	        	"com.springsource.sts.gradle.core.nature"
	}

	classpath {
        	containers "com.springsource.sts.gradle.classpathcontainer"
	}
}

//From the idea plugin - manipulates the project file's XML etc.
idea {
	project {
        	jdkName = sourceCompatibility

		ipr {
        		withXml { provider ->
            		def node = provider.asNode()
            		
            		// Use GIT
        		def vcsConfig = node.component.find { it.'@name' == 'VcsDirectoryMappings' }
        		vcsConfig.mapping[0].'@vcs' = 'Git'
			
            		// Set Gradle home
            		def gradleSettings = node.appendNode('component', [name: 'GradleSettings'])
            		gradleSettings.appendNode('option', [name: 'SDK_HOME', value: gradle.gradleHomeDir])
        		}
		}
	}
}